import requests
import logging

# Log file name
LOG_FILE_PATH = "delete-samples.log"
# API access token
ACCESS_TOKEN = "your-api-access-token"
# Your organization ID, which can be found the dashboard > your account > click on your organization name > copy the ID from the URL
ORGANIZATION_ID = "your-organization-id"
# Max number of samples to delete.  Configure as desired.
MAX_DELETES = 1000 

logging.basicConfig(filename=LOG_FILE_PATH, level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

# MAX_LOOPS is to prevent accidentally running a while loop forever
MAX_LOOPS = 100

loop_number = 0
offset = 0
sample_ids = []
while True:
    loop_number += 1
    if loop_number > MAX_LOOPS:
        logging.error(f"Max loops reached.  Something probably went wrong: {MAX_LOOPS}")
        break
    samples_url = f"https://panacea.threatgrid.com/api/v3/organizations/{ORGANIZATION_ID}/samples?offset={offset}&limit=500"
    logging.info(f"Requesting samples from {samples_url}")
    offset += 500

    # Get all samples for the last 24 hours
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {ACCESS_TOKEN}"
    }
    
    response = requests.get(samples_url, headers=headers)
    
    if response.status_code != 200:
        logging.error(f"Failed to get samples. Error: {response.text}")
        break

    samples = response.json()
    data = samples.get("data", {})
    items = data.get("items", [])

    if not items:
        logging.info("No more samples found.")
        break

    for item in items:
        sample_id = item.get("sample")
        if sample_id:
            sample_ids.append(sample_id)
            logging.info(f"Found sample ID: {sample_id}")

logging.info(f"Found {len(sample_ids)} sample IDs")

delete_url = "https://panacea.threatgrid.com/api/v3/samples"

successful_deletes = 0
failed_deletes = 0
for sample_id in sample_ids:
    if successful_deletes + failed_deletes >= MAX_DELETES:
        logging.warning(f"Reached max deletes: {MAX_DELETES}")
        break
    delete_sample_url = f"{delete_url}/{sample_id}"
    logging.info(f"Deleting sample ID: {sample_id}")
    response = requests.delete(delete_sample_url, headers=headers)
    if response.status_code > 200 and response.status_code < 300:
        successful_deletes += 1
        logging.info(f"Sample {sample_id} deleted successfully.")
    else:
        failed_deletes += 1
        logging.error(f"Failed to delete sample {sample_id}. Error: {response.text} URL: DELETE {delete_sample_url}")

logging.info(f"Successfully deleted {successful_deletes} samples.")
logging.info(f"Failed to delete {failed_deletes} samples.")
logging.info("Delete job is complete.")